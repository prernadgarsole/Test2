const axios = require('axios');
const nodemailer = require('nodemailer');

const taskName = 'New Push:';
const branchName = process.env.GITHUB_REF.split('/').pop();
const commitAuthor = process.env.GITHUB_ACTOR;
const commitMessage = process.env.GITHUB_SHA;
const projectId = '1204763105220463'; // Replace with your Asana project ID
const token = '1/1204760161937729:b3bcc2c3e471c304b84924c4d1290a59'; // Replace with your Asana Personal Access Token

const createTask = async () => {
  try {
    const response = await axios.post(
      'https://app.asana.com/api/1.0/tasks',
      {
        data: {
          name: taskName,
          notes: 'Branch: ' + branchName + '\\nAuthor: ' + commitAuthor + '\\nCommit SHA: ' + commitMessage,
          projects: [projectId],
        },
      },
      {
        headers: {
          'Authorization': 'Bearer ' + token,
        },
      }
    );
    console.log('Asana task created with ID:', response.data.data.id);

    // Get task assignee's email
    const taskId = response.data.data.id;
    const taskResponse = await axios.get(`https://app.asana.com/api/1.0/tasks/${taskId}`, {
      headers: {
        'Authorization': 'Bearer ' + token,
      },
    });

    const assigneeEmail = taskResponse.data.data.assignee.email;

    // Send email notification
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'prernagarsole@gmail.com',
        pass: 'Prerna@1994',
      },
    });

    const mailOptions = {
      from: 'prernagarsole@gmail.com',
      to: assigneeEmail, // Use the assignee's email dynamically
      subject: 'Asana Task Updated',
      text: `The Asana task has been updated for the push job. Task ID: ${response.data.data.id}`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('Error sending email:', error);
      } else {
        console.log('Email sent:', info.response);
      }
    });
  } catch (error) {
    console.error('Error creating Asana task:', error.response.data.errors);
  }
};

createTask();
