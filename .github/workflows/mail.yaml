# name: Asana Integration

# on:
#   push:
#     branches:
#       - main

# jobs:
#   asana:
#     runs-on: windows-latest
#     steps:
#       - name: Install Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - name: Create Asana task
#         run: |
#           npm install --save axios nodemailer
#           node -e "
#             const axios = require('axios');
#             const nodemailer = require('nodemailer');

#             const taskName = 'New Push:';
#             const branchName = process.env.GITHUB_REF.split('/').pop();
#             const commitAuthor = process.env.GITHUB_ACTOR;
#             const commitMessage = process.env.GITHUB_SHA;
#             const projectId = '1204763105220463'; // Replace with your Asana project ID
#             const token = '1/120470161937729:b3bcc2c3e471c304b84924c4d1290a59'; // Replace with your Asana Personal Access Token

#             const createTask = async () => {
#               try {
#                 const response = await axios.post(
#                   'https://app.asana.com/api/1.0/tasks',
#                   {
#                     data: {
#                       name: taskName,
#                       notes: 'Branch: ' + branchName + '\\nAuthor: ' + commitAuthor + '\\nCommit SHA: ' + commitMessage,
#                       projects: [projectId],
#                     },
#                   },
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 console.log('Asana task created with ID:', response.data.data.id);
#                 const taskId = response.data.data.id;
#                 fetchAssigneeEmail(taskId);
#               } catch (error) {
#                 console.error('Error creating Asana task:', error.response.data.errors);
#               }
#             };

#             const fetchAssigneeEmail = async (taskId) => {
#               try {
#                 const response = await axios.get(
#                   'https://app.asana.com/api/1.0/tasks/' + taskId,
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 const assigneeEmail = response.data.data.assignee.email;
#                 sendEmailNotification(assigneeEmail, taskId);
#               } catch (error) {
#                 console.error('Error fetching assignee email:', error.response.data.errors);
#               }
#             };

#             const sendEmailNotification = (assigneeEmail, taskId) => {
#               const transporter = nodemailer.createTransport({
#                 service: 'gmail',
#                 auth: {
#                   user: 'prernagarsole@gmail.com', // Replace with your Gmail email address
#                   pass: 'ocycmtbojtdomkof', // Replace with your Gmail application-specific password
#                 },
#               });

#               const mailOptions = {
#                 from: 'prernagarsole@gmail.com', // Replace with your Gmail email address
#                 to: assigneeEmail,
#                 subject: 'New GitHub Push',
#                 text: 'A new push event has occurred on GitHub. Task ID: ' + taskId,
#               };

#               transporter.sendMail(mailOptions, (error, info) => {
#                 if (error) {
#                   console.error('Error sending email:', error);
#                 } else {
#                   console.log('Email notification sent:', info.response);
#                 }
#               });
#             };

#             createTask();
#           "







# name: Asana Integration Workflow
# on:
#   push:
#     branches:
#       - main
#   issue_comment:
#     types:
#       - created
#   workflow_run:
#     workflows: ["Asana Integration"]
#     types:
#       - completed
#       - comment_added
#       - modified


# jobs:
#   asana:
#     runs-on: windows-latest
#     steps:
#       - name: Install Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - name: Create/Update Asana task
#         run: |
#           npm install --save axios nodemailer
#           node -e "
#             const axios = require('axios');
#             const nodemailer = require('nodemailer');

#             const taskName = 'New Push:';
#             const branchName = process.env.GITHUB_REF.split('/').pop();
#             const commitAuthor = process.env.GITHUB_ACTOR;
#             const commitMessage = process.env.GITHUB_SHA;
#             const projectId = '1204763105220463'; // Replace with your Asana project ID
#             const token = '1/1204760161937729:b3bcc2c3e471c304b84924c4d1290a59'; // Replace with your Asana Personal Access Token

#             const createOrUpdateTask = async () => {
#               try {
#                 // Check if the task already exists
#                 const existingTaskResponse = await axios.get(
#                   'https://app.asana.com/api/1.0/tasks',
#                   {
#                     params: {
#                       project: projectId,
#                       completed_since: 'now',
#                       opt_fields: 'id,name,completed',
#                     },
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );

#                 const existingTasks = existingTaskResponse.data.data;
#                 let taskId = null;

#                 // Find the task with the same name and branch
#                 for (const task of existingTasks) {
#                   if (task.name === taskName && task.notes.includes('Branch: ' + branchName)) {
#                     taskId = task.id;
#                     break;
#                   }
#                 }


#            if (taskId) {
#                             // Task already exists, update it
#                             await updateTask(taskId);
#                             sendEmailNotification('Task updated', taskId);
#                           } else {
#                             // Task doesn't exist, create it
#                             const createResponse = await createTask();
#                             taskId = createResponse.data.data.id;
#                             sendEmailNotification('Task created', taskId);
#                           }
#                         } catch (error) {
#                           console.error('Error creating/updating Asana task:', error.response.data.errors);
#                         }
#                       };
                  

#             const createTask = async () => {
#               try {
#                 const response = await axios.post(
#                   'https://app.asana.com/api/1.0/tasks',
#                   {
#                     data: {
#                       name: taskName,
#                       notes: 'Branch: ' + branchName + '\\nAuthor: ' + commitAuthor + '\\nCommit SHA: ' + commitMessage,
#                       projects: [projectId],
#                     },
#                   },
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 console.log('Asana task created with ID:', response.data.data.id);
#                 return response;
#               } catch (error) {
#                 console.error('Error creating Asana task:', error.response.data.errors);
#               }
#             };

#             const updateTask = async (taskId) => {
#               try {
#                 const response = await axios.put(
#                   'https://app.asana.com/api/1.0/tasks/' + taskId,
#                   {
#                     data: {
#                       name: taskName,
#                       notes: 'Branch: ' + branchName + '\\nAuthor: ' + commitAuthor + '\\nCommit SHA: ' + commitMessage,
#                     },
#                   },
#                   {
#                                         headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 console.log('Asana task updated with ID:', response.data.data.id);
#              // Fetch the assignee email address
#                   await fetchAssigneeEmail(taskId);
#                   // Send email notification
#                sendEmailNotification('Task updated', taskId);
#               } catch (error) {
#                 console.error('Error updating Asana task:', error.response.data.errors);
#               }
#             };


#             const fetchAssigneeEmail = async (taskId) => {
#               try {
#                 const response = await axios.get(
#                   'https://app.asana.com/api/1.0/tasks/' + taskId,
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 const assigneeEmail = response.data.data.assignee.email;
#                 sendEmailNotification(assigneeEmail, taskId);
#               } catch (error) {
#                 console.error('Error fetching assignee email:', error.response.data.errors);
#               }
#             };

#             const sendEmailNotification = (assigneeEmail, taskId) => {
#               const transporter = nodemailer.createTransport({
#                 service: 'gmail',
#                 auth: {
#                   user: 'prernagarsole@gmail.com', // Replace with your Gmail email address
#                   pass: 'ocycmtbojtdomkof', // Replace with your Gmail application-specific password
#                 },
#               });

#               const mailOptions = {
#                 from: 'prernagarsole@gmail.com', // Replace with your Gmail email address
#                 to: assigneeEmail,
#                 subject: 'New GitHub Push',
#                 text: 'A new push event has occurred on GitHub. Task ID: ' + taskId,
#               };

#               transporter.sendMail(mailOptions, (error, info) => {
#                 if (error) {
#                   console.error('Error sending email:', error);
#                 } else {
#                   console.log('Email notification sent:', info.response);
#                 }
#               });
#             };

#             createOrUpdateTask();
#           "











# name: Asana Integration Workflow

# on:
#   push:
#     branches:
#       - main
#   issue_comment:
#     types:
#       - created
#   workflow_run:
#     workflows: ["Asana Integration"]
#     types:
#       - completed
#       - comment_added
#       - modified

# jobs:
#   asana:
#     runs-on: windows-latest
#     steps:
#       - name: Install Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - name: Create/Update Asana task
#         run: |
#           npm install --save axios nodemailer
#           node -e "
#             const axios = require('axios');
#             const nodemailer = require('nodemailer');

#             const taskName = 'New Push:';
#             const branchName = process.env.GITHUB_REF.split('/').pop();
#             const commitAuthor = process.env.GITHUB_ACTOR;
#             const commitMessage = process.env.GITHUB_SHA;
          

#                   const projectId = '1204763105220463'; // Replace with your Asana project ID
#              const token = '1/1200663996881544:3dfe48082ee0407050945c1cf1daaff7'; // Replace with your Asana Personal Access Token
#                 const workspaceId = '10415102240585'
                
                
#                 const validateToken = async () => {
#               try {
#                 const response = await axios.get(
#                   'https://app.asana.com/api/1.0/users/me',
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );

#                 if (response.status !== 200) {
#                   throw new Error('Invalid token');
#                 }
#               } catch (error) {
#                 console.error('Error validating Asana token:', error.message);
#                 process.exit(1); // Exit the workflow with an error status
#               }
#             };



            
#             const createOrUpdateTask = async () => {
#               try {

#                 const eventType = process.env.GITHUB_EVENT_NAME;
#                 if (eventType === 'workflow_run' && process.env.GITHUB_EVENT.workflow_run.event === 'completed') {
#                   // Handle task completion event
#                   const completedTaskId = process.env.GITHUB_EVENT.workflow_run.conclusion;
#                   // Perform necessary actions for task completion, such as updating the task status in Asana or sending an email notification
#                   // ...
#                    // Example: Updating the task status in Asana
#                     await updateTaskStatus(completedTaskId, 'completed');

#                     // Fetch assignee email
#                     await fetchAssigneeEmail(completedTaskId);

#                     // Example: Sending an email notification
#                     sendEmailNotification('Task completed', completedTaskId);

#               return;
#               }
              
                
#                 // Check if the task already exists
#                 const existingTaskResponse = await axios.get(
#                   'https://app.asana.com/api/1.0/tasks',
#                   {
#                     params: {
#                       project: projectId,
#                       completed_since: 'now',
#                       opt_fields: 'id,name,completed',
#                     },
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );

#                 const existingTasks = existingTaskResponse.data.data;
#                 let taskId = null;

#                 // Find the task with the same name and branch
#                 for (const task of existingTasks) {
#                   if (task.name === taskName && task.notes.includes('Branch: ' + branchName)) {
#                     taskId = task.id;
#                     break;
#                   }
#                 }

#                 if (taskId) {
#                   // Task already exists, update it
#                   await updateTask(taskId);
#                   sendEmailNotification('Task updated', taskId);
#                 } else {
#                   // Task doesn't exist, create it
#                   const createResponse = await createTask();
#                   taskId = createResponse.data.data.id;
#                   sendEmailNotification('Task created', taskId);
#                 }
#               } catch (error) {
#                 console.error('Error creating/updating Asana task:', error.response.data.errors);
#               }
#             };

#             const createTask = async () => {
#               try {
#                 const response = await axios.post(
#                   'https://app.asana.com/api/1.0/tasks',
#                   {
#                     data: {
#                       name: taskName,
#                       notes: 'Branch: ' + branchName + '\\nAuthor: ' + commitAuthor + '\\nCommit SHA: ' + commitMessage,
#                       projects: [projectId],
#                     },
#                   },
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 console.log('Asana task created with ID:', response.data.data.id);
#                 return response;
#               } catch (error) {
#                 console.error('Error creating Asana task:', error.response.data.errors);
#               }
#             };


#           const handleTaskCompletion = async () => {
#             const eventType = process.env.GITHUB_EVENT_NAME;
#             if (eventType === 'task_completed') {
#               const completedTaskId = process.env.GITHUB_EVENT.taskId;

#               // Perform necessary actions for task completion
#               await updateTaskStatus(completedTaskId, 'completed');
#               await fetchAssigneeEmail(completedTaskId);
#               sendEmailNotification('Task completed', completedTaskId);
#             }
#           };

#             const updateTask = async (taskId) => {
#               try {
#                 const response = await axios.put(
#                   'https://app.asana.com/api/1.0/tasks/' + taskId,
#                                     {
#                     data: {
#                       name: taskName,
#                       notes: 'Branch: ' + branchName + '\\nAuthor: ' + commitAuthor + '\\nCommit SHA: ' + commitMessage,
#                     },
#                   },
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 console.log('Asana task updated with ID:', response.data.data.id);
#                 // Fetch the assignee email address
#                 await fetchAssigneeEmail(taskId);
#                 // Send email notification
#                 sendEmailNotification('Task updated', taskId);
#               } catch (error) {
#                 console.error('Error updating Asana task:', error.response.data.errors);
#               }
#             };

#             const fetchAssigneeEmail = async (taskId) => {
#               try {
#                 const response = await axios.get(
#                   'https://app.asana.com/api/1.0/tasks/' + taskId,
#                   {
#                     headers: {
#                       'Authorization': 'Bearer ' + token,
#                     },
#                   }
#                 );
#                 const assigneeEmail = response.data.data.assignee.email;
#                 sendEmailNotification(assigneeEmail, taskId);
#               } catch (error) {
#                 console.error('Error fetching assignee email:', error.response.data.errors);
#               }
#             };

#                   const sendEmailNotification = (assigneeEmail, taskId) => {
#              const transporter = nodemailer.createTransport({
#           service: 'gmail',
#             auth: {
#               user: 'prernagarsole@gmail.com', // Replace with your Gmail email address
#               pass: 'ocycmtbojtdomkof', // Replace with your Gmail application-specific password
#             },
#           });

#               const mailOptions = {
#                 from: 'prernagarsole@gmail.com', // Replace with your Gmail email address
#                 to: [assigneeEmail, 'prernagarsole@gmail.com'],
#                 subject: 'New GitHub Push',
#                 text: 'A new push event has occurred on GitHub. Task ID: ' + taskId,
#               };

#               transporter.sendMail(mailOptions, (error, info) => {
#                 if (error) {
#                   console.error('Error sending email:', error);
#                 } else {
#                   console.log('Email notification sent:', info.response);
#                 }
#               });
#             };
            
#             validateToken();
#             sendEmailNotification();
#             createOrUpdateTask();
#             handleTaskCompletion();
#           "


name: GHCtest_ci

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

jobs:
  AutomatedDeploymentTesting:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Fetch Asana Task Details
        id: fetch-task-details
        env:
          ASANA_TOKEN: ${{ secrets.ASANA_TOKEN }}
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          startsWith(github.event.pull_request.head.ref, 'task-')  # Replace 'task-' with your working branch prefix
        run: |
          # Extract the Asana ticket ID from the working branch name
          $ticket_id = [regex]::Match('${{ github.event.pull_request.head.ref }}', '\d{5}').Value
          if ($ticket_id) {
            # Use the ticket ID to fetch the task details from Asana
            $workspace_id = "10415102240585"  # Replace with your actual workspace ID
            $asana_url = "https://app.asana.com/api/1.0/tasks/$ticket_id?workspace=$workspace_id"
            $headers = @{
              "Authorization" = "Bearer $env:ASANA_TOKEN"
            }
            $task_details = Invoke-RestMethod -Uri $asana_url -Headers $headers
            echo "Task Details:"
            echo "Assignee: $($task_details.data.assignee.name)"
            # Print other task details as needed
          } else {
            echo "No Asana ticket ID found in the working branch name."
          }

          
      - name: Deploy to Testing
        id: deploy
        uses: ./.github/workflows/ucd.yml
        env:
          DEPLOYMENT_DIR: 'Testing'
        with:
          args: '--deploy'

  AutomatedDeploymentProduction:
    runs-on: runner-186
    needs: ["AutomatedDeploymentTesting"]
    steps:
      - uses: actions/checkout@v3
      - name: Fetch Asana Task Details
        id: fetch-task-details
        env:
          ASANA_TOKEN: ${{ secrets.ASANA_TOKEN }}
        run: |
          # Extract the Asana ticket ID from the working branch name
          $ticket_id = [regex]::Match('${{ github.head_ref }}', '\d{5}').Value
          # Use the ticket ID to fetch the task details from Asana
          $workspace_id = "10415102240585"  # Replace with your actual workspace ID
          $asana_url = "https://app.asana.com/api/1.0/tasks/$ticket_id?workspace=$workspace_id"
          $headers = @{
            "Authorization" = "Bearer $env:ASANA_TOKEN"
          }
          $task_details = Invoke-RestMethod -Uri $asana_url -Headers $headers
          echo "::set-output name=task-details::$task_details"
          
      - name: Check Task Status
        id: check-task-status
        run: |
          # Extract the task status from the task details
          $task_status = ${{ steps.fetch-task-details.outputs.task-details }}.data.status.name
          if ($task_status -ne "Approved") {
            echo "Task is not approved. Exiting workflow."
            exit 1
          }
          
      - name: Deploy to Production
        id: deploy
        uses: ./.github/workflows/ucd.yml
        env:
          DEPLOYMENT_DIR: 'Production'
        with:
          args: '--deploy'
          
  SendNotification:
    runs-on: runner-186
    needs: ["AutomatedDeploymentTesting", "AutomatedDeploymentProduction"]
    steps:
      - uses: actions/checkout@v3
      - name: Fetch Asana Task Details
        id: fetch-task-details
        env:
          ASANA_TOKEN: ${{ secrets.ASANA_TOKEN }}
        run: |
          # Extract the Asana ticket ID from the working branch name
          $ticket_id = [regex]::Match('${{ github.head_ref }}', '\d{5}').Value
          # Use the ticket ID to fetch the task details from Asana (replace `WORKSPACE_ID` with actual workspace ID)
          $task_details = Invoke-RestMethod -Uri "https://app.asana.com/api/1.0/tasks/$ticket_id?workspace=10415102240585" -Headers @{ Authorization = "Bearer $env:ASANA_TOKEN" }
          echo "::set-output name=task-details::$task_details"
          
      - name: Fetch Asana Assignee Email
        id: fetch-assignee-email
        run: |
          # Extract the assignee email from the task details
          $assignee_email = ${{ steps.fetch-task-details.outputs.task-details }}.data.assignee.email
          echo "::set-output name=assignee-email::$assignee_email"
      - name: Fetch Asana Requester Email
        id: fetch-requester-email
        run: |
          # Extract the requester email from the task details
          $requester_email = ${{ steps.fetch-task-details.outputs.task-details }}.data.requester.email
          echo "::set-output name=requester-email::$requester_email"
          
      - name: Send Notification
        if: github.event.pull_request.base.ref == 'Test'
        uses: dawidd6/action-outlook-mail@v3
        with:
          smtp-server: compass1.nfcu.net
          smtp-port: 25
          to: ${{ steps.fetch-assignee-email.outputs.assignee-email }}
          subject: Successful deployment notification
          body: |
            "Dear assignee, 
            The deployment to the TEST environment has been successfully completed.     
            Best regards,
            Your Organization"
            
      - name: Send Notification
        if: github.event.pull_request.base.ref == 'master'
        uses: dawidd6/action-outlook-mail@v3
        with:
          smtp-server: compass1.nfcu.net
          smtp-port: 25
          to: ${{ steps.fetch-requester-email.outputs.requester-email }}
          subject: Successful deployment notification
          body: |
            "Dear requester,     
            The deployment to the production environment has been successfully completed.        
            Best regards,
            Your Organization"
  
  PublishUCD:
    needs: ["AutomatedDeploymentProduction"]
    uses: deploy-mgmt-test/DeplMgmtApp/.github/workflows/ucd.yml@feature-Asana-GH-Integration-POC
    secrets: inherit
    
  PublishGitHub:
    needs: ["PublishUCD"]
    uses: deploy-mgmt-test/DeplMgmtApp/.github/workflows/upload.yml@feature-Asana-GH-Integration-POC
    secrets: inherit
------



 SendNotificationTesting:
    runs-on: runner-186
    needs: ["AutomatedDeploymentTesting"]
    steps:
      - name: Fetch Asana Task Details
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const taskDetails = await github.actions.outputs['task-details'];
            const assigneeEmail = taskDetails.data.assignee.email;
            console.log(`::set-output name=assignee-email::${assigneeEmail}`)

      - name: Send Notification - Testing
        if: github.event.pull_request.base.ref == 'Test'
        uses: dawidd6/action-outlook-mail@v3
        with:
          smtp-server: compass1.nfcu.net
          smtp-port: 25
          to: ${{ steps.fetch-assignee-email.outputs.assignee-email }}
          subject: Successful deployment notification - Testing
          body: |
            Dear assignee, 
            The deployment to the TEST environment has been successfully completed.     
            Best regards,
            Your Organization

  SendNotificationProduction:
    runs-on: runner-186
    needs: ["AutomatedDeploymentProduction"]
    steps:
      - name: Fetch Asana Task Details
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const taskDetails = await github.actions.outputs['task-details'];
            const requesterEmail = taskDetails.data.requester.email;
            console.log(`::set-output name=requester-email::${requesterEmail}`)

      - name: Send Notification - Production
        if: github.event.pull_request.base.ref == 'Master'
        uses: dawidd6/action-outlook-mail@v3
        with:
          smtp-server: compass1.nfcu.net
          smtp-port: 25
          to: ${{ steps.fetch-requester-email.outputs.requester-email }}
          subject: Successful deployment notification - Production
          body: |
            Dear requester,     
            The deployment to the production environment has been successfully completed.        
            Best regards,
            Your Organization


















                     






